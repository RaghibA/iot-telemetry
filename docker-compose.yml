version: '3.9'

services:
  nginx:
    image: nginx:1.27.4
    container_name: nginx
    ports:
      - "80:80" # Exposing port 80 for HTTP traffic
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - admin-service
      - data-service
      # - consumer-service
      - auth-service

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.5.1-ubuntu
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana UI
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus  # Ensure Grafana starts after Prometheus
    restart: unless-stopped

  zookeeper:
    image: bitnami/zookeeper:3.7
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    restart: always
    image: bitnami/kafka:3.0.0
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list" ]
      interval: 5s
      retries: 10
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper

  db:
    env_file:
      - .env
    image: postgres:16
    container_name: iot-telem-db
    restart: always # restart db in case of error
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - iot-telemetry-postgres:/var/lib/postgresql/data

  migration:
    env_file:
      - .env
    build:
      context: .
      dockerfile: cmd/migration/migration.Dockerfile
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=${POSTGRES_PORT}
    depends_on:
      - db

  auth-service:
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/auth/auth.Dockerfile
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=${POSTGRES_PORT}
      - PORT=${AUTH_PORT}
      - HOST=${AUTH_HOST}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    restart: always
    depends_on:
      - db

  admin-service:
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/admin/admin.Dockerfile
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=${POSTGRES_PORT}
      - PORT=${IOT_ADMIN_PORT}
      - HOST=${IOT_ADMIN_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
    ports:
      - "${IOT_ADMIN_PORT}:${IOT_ADMIN_PORT}"
    restart: always
    depends_on:
      - db
      - kafka

  data-service:
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/data/data.Dockerfile
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=${POSTGRES_PORT}
      - PORT=${IOT_DATA_PORT}
      - HOST=${IOT_DATA_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
    ports:
      - "${IOT_DATA_PORT}:${IOT_DATA_PORT}"
    restart: always
    depends_on:
      - db
      - kafka

  consumer-service:
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/consumer/consumer.Dockerfile
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_PORT=${POSTGRES_PORT}
      - PORT=${CONSUMER_PORT}
      - HOST=${CONSUMER_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
    ports:
      - "${CONSUMER_PORT}:${CONSUMER_PORT}"
    restart: always
    depends_on:
      - db
      - kafka

volumes:
  iot-telemetry-postgres:
  kafka_data:
  zookeeper_data:

networks:
  default:
    driver: bridge
